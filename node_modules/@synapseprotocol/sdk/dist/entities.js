import { SynapseBridgeFactory, L1BridgeZapFactory, L2BridgeZapFactory, BridgeConfigV3Factory, } from "./contracts.js";
import { ChainId } from "./common/chainid.js";
import { contractAddressFor } from "./common/utils.js";
import { rpcProviderForChain } from "./internal/index.js";
const bridgeConfigV3Address = "0x5217c83ca75559B1f8a8803824E5b7ac233A12a1";
var ContractKind;
(function (ContractKind) {
    ContractKind["bridge"] = "bridge";
    ContractKind["bridgeZap"] = "bridgeZap";
})(ContractKind || (ContractKind = {}));
export function SynapseBridgeContractInstance(params) {
    return SynapseBridgeFactory.connect(contractAddressFor(params.chainId, ContractKind.bridge), params.signerOrProvider);
}
export function L1BridgeZapContractInstance(params) {
    return L1BridgeZapFactory.connect(contractAddressFor(params.chainId, ContractKind.bridgeZap), params.signerOrProvider);
}
export function L2BridgeZapContractInstance(params) {
    return L2BridgeZapFactory.connect(contractAddressFor(params.chainId, ContractKind.bridgeZap), params.signerOrProvider);
}
export function GenericZapBridgeContractInstance(params) {
    return params.chainId === ChainId.ETH
        ? L1BridgeZapContractInstance(params)
        : L2BridgeZapContractInstance(params);
}
export function BridgeConfigV3ContractInstance() {
    return BridgeConfigV3Factory.connect(bridgeConfigV3Address, rpcProviderForChain(ChainId.ETH));
}
