import { SynapseContracts } from "./synapse_contracts";
import { StaticCallResult } from "./types";
import type { Signer } from "@ethersproject/abstract-signer";
import type { PopulatedTransaction, ContractTransaction } from "@ethersproject/contracts";
import { BigNumber } from "@ethersproject/bignumber";
export declare const rejectPromise: (e: any) => Promise<never>;
declare type Resolveable<T> = T | Promise<T>;
export declare function executePopulatedTransaction(populatedTxn: Resolveable<PopulatedTransaction>, signer: Signer): Promise<ContractTransaction>;
export declare function staticCallPopulatedTransaction(populatedTxn: Resolveable<PopulatedTransaction>, signer: Signer): Promise<StaticCallResult>;
/**
 * "Fixes" a value into units of Wei; should be used when tokens
 * have a decimals value which isn't 18
 * (such as USDC/USDT on chains which aren't BSC) and you need to do
 * calculations using proper units of Wei instead of, for example in the case of
 * USDC/USDT, Szabo (10^-6)
 * @param amt
 * @param decimals
 */
export declare function fixWeiValue(amt: BigNumber, decimals: number): BigNumber;
export declare function contractAddressFor(chainId: number, key: string): string;
export declare const contractsForChainId: (chainId: number) => SynapseContracts.SynapseContract;
export {};
