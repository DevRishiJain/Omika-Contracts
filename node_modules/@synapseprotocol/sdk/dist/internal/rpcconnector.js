import { Web3Provider } from "@ethersproject/providers";
import { MiniRpcProvider } from "./minirpc.js";
export class RpcConnector {
    _providers;
    _web3Providers;
    _chainEndpoints;
    constructor(args) {
        const { urls, batchInterval = 50 } = args;
        this._chainEndpoints = urls;
        const miniRpcProviders = Object.keys(urls).reduce((acc, chainId) => {
            const cid = Number(chainId);
            acc[cid] = this._newProvider(cid, urls[cid], batchInterval);
            return acc;
        }, {});
        const web3Providers = Object.keys(miniRpcProviders).reduce((acc, chainId) => {
            const cid = Number(chainId);
            acc[cid] = new Web3Provider(miniRpcProviders[cid]);
            return acc;
        }, {});
        this._providers = miniRpcProviders;
        this._web3Providers = web3Providers;
    }
    provider(chainId) {
        return this._web3Providers[chainId];
    }
    /**
     * @internal
     */
    setProviderConfig(chainId, endpoint, batchInterval = 50) {
        const provider = this._newProvider(chainId, endpoint, batchInterval);
        delete this._chainEndpoints[chainId];
        delete this._providers[chainId];
        delete this._web3Providers[chainId];
        this._chainEndpoints[chainId] = endpoint;
        this._providers[chainId] = provider;
        this._web3Providers[chainId] = new Web3Provider(provider);
    }
    _newProvider(chainId, endpoint, batchInterval) {
        return new MiniRpcProvider(chainId, endpoint, batchInterval);
    }
}
