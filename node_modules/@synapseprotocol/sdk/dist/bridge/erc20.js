import { BigNumber, } from "@ethersproject/bignumber";
import { ERC20Factory, } from "../contracts.js";
import { rpcProviderForChain } from "../internal/index.js";
import { executePopulatedTransaction, rejectPromise } from "../common/utils.js";
import { GasUtils } from "./gasutils.js";
export const MAX_APPROVAL_AMOUNT = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
export var ERC20;
(function (ERC20_1) {
    class ERC20 {
        address;
        chainId;
        instance;
        constructor(args) {
            this.address = args.tokenAddress;
            this.chainId = args.chainId;
            this.instance = ERC20Factory.connect(this.address, null);
        }
        connectContract(provider) {
            provider = provider ? provider : rpcProviderForChain(this.chainId);
            return this.instance.connect(provider);
        }
        async approve(args, signer) {
            const contract = this.connectContract(signer), approveTxn = this._buildApproveTransaction(args, contract);
            return executePopulatedTransaction(approveTxn, signer);
        }
        async buildApproveTransaction(args, provider) {
            const contract = this.connectContract(provider);
            return this._buildApproveTransaction(args, contract);
        }
        async _buildApproveTransaction(args, contract) {
            const { spender, amount = MAX_APPROVAL_AMOUNT } = args;
            return contract
                .populateTransaction
                .approve(spender, amount)
                .then(txn => {
                return GasUtils.populateGasParams(this.chainId, txn, "approve");
            })
                .catch(rejectPromise);
        }
        async balanceOf(address) {
            return this.connectContract().balanceOf(address);
        }
        async allowanceOf(owner, spender) {
            return this.connectContract().allowance(owner, spender);
        }
    }
    async function approve(approveArgs, tokenParams, signer) {
        return new ERC20(tokenParams).approve(approveArgs, signer);
    }
    ERC20_1.approve = approve;
    async function buildApproveTransaction(approveArgs, tokenParams) {
        return new ERC20(tokenParams).buildApproveTransaction(approveArgs);
    }
    ERC20_1.buildApproveTransaction = buildApproveTransaction;
    async function balanceOf(address, tokenParams) {
        return new ERC20(tokenParams).balanceOf(address);
    }
    ERC20_1.balanceOf = balanceOf;
    async function allowanceOf(owner, spender, tokenParams) {
        return new ERC20(tokenParams).allowanceOf(owner, spender);
    }
    ERC20_1.allowanceOf = allowanceOf;
})(ERC20 || (ERC20 = {}));
