import { ChainId } from "../common/chainid.js";
import { parseUnits } from "@ethersproject/units";
import { BigNumber } from "@ethersproject/bignumber";
export var GasUtils;
(function (GasUtils) {
    const makeGwei = (n) => parseUnits(n, "gwei");
    const CHAIN_GAS_PARAMS = {
        [ChainId.ETH]: {
            maxFeePerGas: makeGwei("100"),
            maxPriorityFee: makeGwei("1.5"),
            bridgeGasLimit: BigNumber.from(100000),
            approveGasLimit: BigNumber.from(75000),
        },
        [ChainId.OPTIMISM]: {
            bridgeGasLimit: BigNumber.from(250000),
            approveGasLimit: BigNumber.from(90000),
        },
        [ChainId.BSC]: {
            gasPrice: makeGwei("6"),
            bridgeGasLimit: BigNumber.from(260000),
            approveGasLimit: BigNumber.from(75000)
        },
        [ChainId.POLYGON]: {
            maxFeePerGas: makeGwei("32.01"),
            maxPriorityFee: makeGwei("32"),
            bridgeGasLimit: BigNumber.from(1000000),
            approveGasLimit: BigNumber.from(86000)
        },
        [ChainId.BOBA]: {
            gasPrice: makeGwei("10"),
            approveGasLimit: BigNumber.from(60000),
        },
        [ChainId.ARBITRUM]: {
            gasPrice: makeGwei("1.5"),
            bridgeGasLimit: BigNumber.from(1500000),
        },
        [ChainId.AVALANCHE]: {
            maxFeePerGas: makeGwei("150"),
            maxPriorityFee: makeGwei("3"),
            bridgeGasLimit: BigNumber.from(700000),
            approveGasLimit: BigNumber.from(75000),
        },
        [ChainId.AURORA]: {
            gasPrice: makeGwei('1'),
        },
    };
    GasUtils.makeGasParams = (chainId) => CHAIN_GAS_PARAMS[chainId] ?? {};
    GasUtils.populateGasParams = (chainId, txn, gasLimitKind) => Promise.resolve(txn)
        .then((tx) => {
        let { maxFeePerGas, maxPriorityFee, gasPrice, approveGasLimit, bridgeGasLimit } = GasUtils.makeGasParams(chainId);
        tx.chainId = chainId;
        if (gasPrice) {
            tx.gasPrice = gasPrice;
        }
        else if (maxFeePerGas) {
            tx.maxFeePerGas = maxFeePerGas;
            if (maxPriorityFee) {
                tx.maxPriorityFeePerGas = maxPriorityFee;
            }
        }
        switch (gasLimitKind) {
            case "bridge":
                if (bridgeGasLimit)
                    tx.gasLimit = bridgeGasLimit;
                break;
            case "approve":
                if (approveGasLimit)
                    tx.gasLimit = approveGasLimit;
                break;
        }
        return tx;
    });
})(GasUtils || (GasUtils = {}));
